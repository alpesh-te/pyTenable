'''
Vulnerability
=============

The following methods allow for interaction of VM vulnerabilities into
Tenable.io
:devportal:`vulnerabilities <vulnerabilities>` API.

Methods available on ``tio.v3.vm.vulnerabilities``:

.. rst-class:: hide-signature
.. autoclass:: VulnerabilityAPI
    :members:
'''

from typing import Dict, Union

from requests import Response

from tenable.io.v3.base.endpoints.explore import ExploreBaseEndpoint
from tenable.io.v3.base.iterators.explore_iterator import (CSVChunkIterator,
                                                           SearchIterator)


class VulnerabilityAPI(ExploreBaseEndpoint):
    '''
    API class containing all the methods related to VM Vulnerability.
    '''
    _path = 'api/v3'
    _conv_json = True

    def import_vulnerability(self, data: Dict) -> Dict:
        '''
        The import vulnerability methods

        Args:
            data: vulnerability data the need to be imported
            Example:
                >>> data = {'vendor': 'tenable',
                    'product': 'tenable.sc',
                    'data_type': 'vm',
                    'source':
                        '75c6c4c3-1626-4b57-9095-71b58ff8999e: \
                        e9b89d18-87cc-4fd5-8e6f-27a1d24fa2ac0',
                    'assets': [{
                        'network_interfaces': {
                            'ipv4': ['192.0.2.57', '192.0.2.177']
                        },
                        'hostname': 'windsmb.server.example.com',
                        'bios_uuid': '9c60da51-762a-4b9b-8504-411056c2f696',
                        'netbios_name': 'JUPITER',
                        'vulnerabilities': [{
                            'tenable_plugin_id': '97737',
                            'last_found': 1568086236,
                            'output': 'Description: The remote Windows host \
                                is missing a security update.'
                        }]
                    }]
                }

        Returns:
            :obj:`dict`: {'job_uuid':''}
            This attribute is always empty.
            An empty value does not indicate an error condition.

        Examples:
            >>> tio.v3.vm.vulnerabilities.import_vulnerability(data)
        '''
        return self._post('findings/types/host', json=data)

    def search(self,
               **kw
               ) -> Union[SearchIterator, CSVChunkIterator, Response]:
        '''
        Search and retrieve the VM Vulnerabilities based on supported
        conditions.

        Args:

            fields (list, optional):
                The list of field names to return from the Tenable API.
                Example:
                    >>> ['field1', 'field2']

            filter (tuple, Dict, optional):
                A nestable filter object detailing how to filter the results
                down to the desired subset.
                Examples:
                    >>> ('or', ('and', ('test', 'oper', '1'),
                    ...                 ('test', 'oper', '2')
                    ...             ),
                    ...     'and', ('test', 'oper', 3)
                    ... )

                    >>> {
                    ...  'or': [{
                    ...      'and': [{
                    ...              'value': '1',
                    ...              'operator': 'oper',
                    ...              'property': '1'
                    ...          },
                    ...          {
                    ...              'value': '2',
                    ...              'operator': 'oper',
                    ...              'property': '2'
                    ...          }
                    ...      ]
                    ...  }],
                    ...  'and': [{
                    ...      'value': '3',
                    ...      'operator': 'oper',
                    ...      'property': 3
                    ...  }]
                    ... }
                As the filters may change and sortable fields may change over
                time, it's highly recommended that you look at the output of
                the :py:meth:`tio.v3.vm.filters.audit_log_filters()`
                endpoint to get more details.

            sort (list[tuple], optional):
                A list of dictionaries describing how to sort the data
                that is to be returned.
                Examples:
                    >>> [('field_name_1', 'asc'),
                    ...      ('field_name_2', 'desc')]

            limit (int, optional):
                Number of objects to be returned in each request.
                Default and max_limit is 200.

            next (str, optional):
                The pagination token to use when requesting the next page of
                results. This token is presented in the previous response.

            return_resp (bool, optional):
                If set to true, will override the default behavior to return
                an iterable and will instead return the results for the
                specific page of data.

            return_csv (bool, optional):
                If set to true, it will return the CSV response or
                iterable (based on return_resp flag). Iterator returns all
                rows in text/csv format for each call with row headers.

        Returns:

            iterable:
                The iterable that handles the pagination for the job.

            requests.Response:
                If ``return_json`` was set to ``True``, then a response
                object is instead returned instead of an iterable.

        Examples:
            >>> tio.v3.vm.vulnerabilities.search(
            ... filter=('id', 'eq', '00089a45-44a5-4620-bf9f-75ebedc6cc6c'),
            ... fields=['id'], limit=2)
        '''
        api_path = 'findings/vulnerabilities/host/search'
        iclass = SearchIterator
        if kw.get('return_csv', False):
            iclass = CSVChunkIterator
        return super()._search(iterator_cls=iclass,
                               is_sort_with_prop=True,
                               api_path=f'{self._path}/{api_path}',
                               resource='findings',
                               **kw
                               )
