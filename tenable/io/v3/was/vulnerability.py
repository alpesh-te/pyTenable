'''
Vulnerability
=============

The following methods allow for interaction into the Tenable.io
:devportal:`vulnerabilities <vulnerabilities>` API.

Methods available on ``tio.v3.was.vulnerability``:

.. rst-class:: hide-signature
.. autoclass:: VulnerabilityAPI
    :members:
'''
from typing import Dict

from tenable.io.v3.base.endpoints.explore import ExploreBaseEndpoint
from tenable.io.v3.base.iterators.search_iterator import SearchIterator
from tenable.io.v3.base.schema.explore.filters import FilterSchema
from tenable.io.v3.base.schema.explore.search import SearchSchema
from tenable.io.v3.base.schema.explore.utils import generate_sort_data


class VulnerabilityIterator(SearchIterator):
    '''
    Vulnerability iterator
    '''
    pass


class VulnerabilityAPI(ExploreBaseEndpoint):

    '''
    '''
    _path = 'api/v3'
    _conv_json = True

    def get_details(self, id: str) -> Dict:
        '''
        Return details of a particular finding

        Args:
            id: The unique identifier of the finding.

        Returns:
            :obj:`dict`: details of the respective finding id

        Examples:
            >>> tio.v3.was.vulnerability.get_details()
        '''
        return self._get(f'findings/vulnerabilities/webapp/{id}')

    def search(self, *filters, **kw) -> VulnerabilityIterator:
        '''
        Vulnerability Search method

        Args:
            fields (list):  ['field1', 'field2']
            filter (tuple):
                ('field_name', 'operator', 'value')
                ('and', ('test', 'oper', '1'), ('test', 'oper', '2'))
            sort
                'sort': [{'last_observed': 'desc'}]
            limit (integer) (10)
            next (str):
                next token ('adfj3u4j34u9j48wi3j5w84jt5')

        Returns:
            Iterable:
                The iterable that handles the pagination and potentially
                async requests for the job.

        Examples:
            >>>  tio.v3.was.vulnerability.search(
                ('id', 'eq', '00089a45-44a5-4620-bf9f-75ebedc6cc6c'),
                fields=["id"],limit=2)
        '''
        filter_schema = FilterSchema()
        search_schema = SearchSchema()
        filter = filter_schema.dump(filter_schema.load(
            filters[0] if filters else None
        ))
        sort_data = generate_sort_data(kw, is_with_prop=False)
        kw.update({'filter': filter,
                   'sort': sort_data})
        payload = search_schema.dump(search_schema.load(kw))

        return VulnerabilityIterator(
            api=self,
            _limit=payload['limit'],
            _path='findings/vulnerabilities/webapp/search',
            _resource='findings',
            _payload=payload
        )
