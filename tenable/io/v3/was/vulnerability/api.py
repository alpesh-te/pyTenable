'''
Vulnerability
=============

The following methods allow for interaction into the Tenable.io
:devportal:`vulnerabilities <was-v2-vulnerabilities>` API.

Methods available on ``tio.v3.was.vulnerabilities``:

.. rst-class:: hide-signature
.. autoclass:: VulnerabilityAPI
    :members:
'''
from typing import Dict, Union

from requests import Response

from tenable.io.v3.base.endpoints.explore import ExploreBaseEndpoint
from tenable.io.v3.base.iterators.explore_iterator import (CSVChunkIterator,
                                                           SearchIterator)


class VulnerabilityAPI(ExploreBaseEndpoint):
    '''
    API class containing all the methods related to WAS Vulnerability.
    '''
    _path = 'api/v3'
    _conv_json = True

    def get_details(self, id: str) -> Dict:
        '''
        Return details of a particular finding

        Args:
            id: The unique identifier of the finding.

        Returns:
            :obj:`dict`: details of the respective finding id

        Examples:
            >>> tio.v3.was.vulnerabilities.get_details(id)
        '''
        return self._get(f'findings/vulnerabilities/webapp/{id}')

    def search(self,
               **kw
               ) -> Union[SearchIterator, CSVChunkIterator, Response]:
        '''
        Vulnerabilities Search Method.

        Args:
            fields (list):
                The list of field names to return from the Tenable API.

                Example:
                    - ``['field1', 'field2']``
            filter (tuple, Dict):
                A nestable filter object detailing how to filter the results
                down to the desired subset.

                Examples:
                    >>> ('or', ('and', ('test', 'oper', '1'),
                                   ('test', 'oper', '2')
                            ),
                    'and', ('test', 'oper', 3)
                   )
                    >>> {'or': [
                    {'and': [
                        {'value': '1', 'operator': 'oper', 'property': '1'},
                        {'value': '2', 'operator': 'oper', 'property': '2'}
                        ]
                    }],
                    'and': [
                        {'value': '3', 'operator': 'oper', 'property': 3}
                        ]
                    }

                As the filters may change and sortable fields may change over
                time, it's highly recommended that you look at the output of
                the :py:meth:`tio.v3.vm.filters.asset_filters()`
                endpoint to get more details.
            sort list(tuple, Dict):
                A list of dictionaries describing how to sort the data
                that is to be returned.

                Examples:
                    - ``[('field_name_1', 'asc'),
                             ('field_name_2', 'desc')]``
                    - ``[{'property': 'last_observed', 'order': 'desc'}]``
            limit (int):
                Number of objects to be returned in each request.
                Default is 1000.
            next (str):
                The pagination token to use when requesting the next page of
                results.  This token is presented in the previous response.
            return_resp (bool):
                If set to true, will override the default behavior to return
                an iterable and will instead return the results for the
                specific page of data.
            return_csv (bool):
                If set to true, It wil return the CSV Iterable. Returns all
                data in text/csv format on each next call with row headers
                on each page.

        Returns:
            Returns:
                Iterable:
                    The iterable that handles the pagination and potentially
                    async requests for the job.
                requests.Response:
                    If ``return_json`` was set to ``True``, then a response
                    object is instead returned instead of an iterable.

        Examples:
            >>> tio.v3.was.vulnerabilities.search(
            ... ('id', 'eq', '002a204d-a9d9-469b-a9c7-403ea3574103'),
            ... fields=['id'],limit=2)
        '''
        api_path = 'findings/vulnerabilities/webapp/search'
        iclass = SearchIterator
        if kw.get('return_csv', False):
            iclass = CSVChunkIterator
        return super().search(resource='findings',
                              iterator_cls=iclass,
                              is_sort_with_prop=False,
                              api_path=f'{self._path}/{api_path}',
                              **kw
                              )
