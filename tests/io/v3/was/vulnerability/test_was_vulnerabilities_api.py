'''
Testing the WAS Vulnerabilities endpoints actions
'''
import responses
from requests import Response
from responses import matchers

from tenable.io.v3.base.iterators.explore_iterator import (CSVChunkIterator,
                                                           SearchIterator)

VUL_BASE_URL = r'https://cloud.tenable.com/api/v3/findings/vulnerabilities'
BASE_URL = r'https://cloud.tenable.com'


@responses.activate
def test_get_details(api):
    '''
    Test the get_details method for WAS Vulnerabilities
    '''
    id = '00089a45-44a7-4620-bf9f-75ebedc6cc6c'
    response = {
        'findings': [{
            'id': id,
            'asset': {},
            'definition': {
                'vpr': {},
                'cvss2': {},
                'cvss3': {},
                'references': [],
                'exploit_frameworks': []
            },
            'scan': {}
        }],
        'pagination': {
            'total': 1
        }
    }
    responses.add(
        responses.GET,
        f"{VUL_BASE_URL}/webapp/{id}",
        json=response
    )

    resp = api.v3.was.vulnerabilities.get_details(id)
    assert resp == response


@responses.activate
def test_search(api):
    '''
    Test the search functionality of Vulnerability API
    '''
    fields = [
        "asset_name",
        "severity",
        "plugin_id",
        "state",
        "last_observed",
        "finding_id"
    ]

    payload = {
        'fields': fields,
        'limit': 200,
    }

    api_response = {
        "findings": [{
            "finding_id": "002a204d-a9d9-469b-a9c7-403ea3574103",
            "asset_name": "www.google.com",
            "severity": 1,
            "state": "ACTIVE",
            "last_observed": "2022-01-06T00:50:45.130Z"
        }, {
            "finding_id": "01155383-f1e1-4f1e-9814-7849a99cab8d",
            "asset_name": "www.google.com",
            "severity": 0,
            "state": "ACTIVE",
            "last_observed": "2022-01-05T22:47:45.227Z"
        }],
        "pagination": {
            "total": 2,
            "next": "nextToken"
        }
    }

    responses.add(
        responses.POST,
        f"{VUL_BASE_URL}/webapp/search",
        match=[matchers.json_params_matcher(payload)],
        json=api_response
    )

    iterator = api.v3.was.vulnerabilities.search(
        fields=fields, limit=200
    )
    assert isinstance(iterator, SearchIterator)

    event_list = []
    for event in iterator:
        event_list.append(event)
    assert len(event_list) == api_response['pagination']['total']

    iterator = api.v3.was.vulnerabilities.search(
        fields=fields, return_csv=True
    )
    assert isinstance(iterator, CSVChunkIterator)

    resp = api.v3.was.vulnerabilities.search(
        fields=fields, return_resp=True, limit=200
    )
    assert isinstance(resp, Response)
