'''
Testing the VM Vulnerabilities endpoints actions
'''
import responses
from requests import Response
from responses import matchers

from tenable.io.v3.base.iterators.explore_iterator import (CSVChunkIterator,
                                                           SearchIterator)

VUL_BASE_URL = r'https://cloud.tenable.com/api/v3/findings/vulnerabilities'
BASE_URL = r'https://cloud.tenable.com/api/v3'


@responses.activate
def test_import_vulnerability(api):
    '''
    Test to validate Import Vulnerability action
    '''
    data = {
        'vendor': 'tenable',
        'product': 'tenable.sc',
        'data_type': 'vm',
        'source': '75c6c4c3-1626-4b57-9095-71b58ff8999e:\
            e9b89d18-87cc-4fd5-8e6f-27a1d24fa2ac0',
        'assets': [{
            'network_interfaces': {
                'ipv4': ['192.0.2.57', '192.0.2.177']
            },
            'hostname': 'windsmb.server.example.com',
            'bios_uuid': '9c60da51-762a-4b9b-8504-411056c2f696',
            'netbios_name': 'JUPITER',
            'vulnerabilities': [{
                'tenable_plugin_id': '97737',
                'last_found': 1568086236,
                'output': 'Description: The remote Windows host is \
                    missing a security update.'
            }]
        }]
    }

    responses.add(
        responses.POST,
        f"{BASE_URL}/findings/types/host",
        match=[matchers.json_params_matcher(data)],
        json={"job_uuid": ""}
    )
    resp = api.v3.vm.vulnerabilities.import_vulnerability(data)
    assert resp == {"job_uuid": ""}


@responses.activate
def test_search(api):
    '''
    Test the search functionality of Vulnerability API
    '''
    fields = ["finding_id"]
    limit = 5
    payload = {
        'fields': ['finding_id'],
        'limit': 3,
    }
    response = {
        "findings": [{
            "finding_id": "28e22661-9ef0-4495-b08b-470cc51aa442"
        }, {
            "finding_id": "2988f9d0-322a-423f-b954-56e441642235"
        }, {
            "finding_id": "2b487a38-3273-4392-b7f3-97f343f70c30"
        }],
        "pagination": {
            "total": 3,
            "next": "eyJwcm9wZXJ0aWVzIjpbXSwibmV4dCI6IntcImZpbmRpbmdJZFwiOl \
                wiMmI0ODdhMzgtMzI3My00MzkyLWI3ZjMtOTdmMzQzZjcwYzMwXCJ9In0="
        }
    }
    responses.add(
        responses.POST,
        f"{VUL_BASE_URL}/host/search",
        match=[matchers.json_params_matcher(payload)],
        json=response
    )

    resp = api.v3.vm.vulnerabilities.search(fields=fields, limit=limit)
    assert isinstance(resp, SearchIterator or CSVChunkIterator or Response)
    assert resp._payload == payload
    assert list(resp) == response.get("findings")
