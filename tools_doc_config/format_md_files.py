#!/usr/bin/env python3
"""
This script is intended to format MD files to be published on Github

:copyright: Tenable, Inc., 2020
:date: Feb 07, 2020
:author: @mupadhyay
"""
import argparse
import os
import shutil


class FormatMDFiles:
    """
    This class contains method(s) related to format MD files for GitHub
    """

    @staticmethod
    def format_md_files(args) -> None:
        """
        This method format MD files provided in source directory and store those in destination directory
        :return: None
        """
        # Get path for all possible files for a given source directory
        full_path_name_all = []
        for path, dirs, files in os.walk(args.source_directory):
            for filename in files:
                full_path_name_all.append(os.path.join(path, filename))

        # Get list of path of md files for a given source directory
        md_file_path_list = set()
        for path in full_path_name_all:
            if os.path.isfile(path):
                file_path, file_ext = os.path.splitext(path)
                if file_ext == '.md':
                    md_file_path_list.add(path)

        # Remove existing md files under destination directory, and create empty folder for the same with provided name
        try:
            if os.path.isdir(args.destination_directory):
                shutil.rmtree(args.destination_directory)
            os.mkdir(args.destination_directory)
        except OSError as error:
            print("Error for: %s : %s" % (args.destination_directory, error.strerror))

        # Format md files such that GitHub can interpret
        for file in md_file_path_list:
            file_name_current = os.path.basename(file)
            output_file = os.path.join(args.destination_directory, file_name_current)
            if file_name_current == 'search.md':
                continue
            line_number = 0
            with open(file, 'r', encoding="utf-8") as input_file:
                with open(output_file, 'w') as output_file_1:
                    for line in input_file.readlines():
                        try:
                            line_number = line_number + 1
                            if all([line.strip(), '<title>' not in line, '.js' not in line, '.css' not in line,
                                    'search.md' not in line]):
                                output_file_1.writelines(line)
                        except Exception as e:
                            print('Exception at %s:%d\n' % (file, line_number))
                            print('Line=[%s]\n' % line)
                            raise e


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-s', '--source_directory',
                        default='.',
                        help='Directory that contains files generated by Sphinx for documentation')
    parser.add_argument('-d', '--destination_directory',
                        default='.',
                        help='Directory to store md files to be published on GitHub')
    #  Example of command line arguments: -s pytools/source/build/ -d pytools/documentation/

    parser.set_defaults(func=FormatMDFiles.format_md_files)

    __args = parser.parse_args()

    __args.func(__args)
